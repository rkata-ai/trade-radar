package main

import (
	"context"
	"flag"
	"log"
	"os"
	"os/signal"
	"syscall"

	"traiding/internal/ai"
	"traiding/internal/config"
)

func main() {
	// –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–ª–∞–≥–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	var configPath string
	flag.StringVar(&configPath, "config", "", "Path to configuration file (required)")
	flag.Parse()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	logger := log.Default()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ config –ø–µ—Ä–µ–¥–∞–Ω
	if configPath == "" {
		logger.Printf("Usage: ./bin/trading.exe -config <path_to_config>")
		logger.Printf("Example: ./bin/trading.exe -config bin/config.yaml")
		os.Exit(1)
	}

	logger.Print("Starting R&D research for trading channel rating system")
	logger.Printf("Using config file: %s", configPath)

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := config.Load(configPath)
	if err != nil {
		logger.Fatalf("Failed to load config: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∫–ª–∏–µ–Ω—Ç–∞
	aiClient := ai.NewOllamaClient(cfg.AI.OllamaBaseURL, cfg.AI.OllamaModel)

	// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AnalyzeMessage
	testMessage := "#–ê—ç—Ä–æ—Ñ–ª–æ—Ç (#AFLT) - –ø—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª—Å—è, —á—Ç–æ –¥–∞–ª—å—à–µ?  –ü–∞—Ä—É –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥ –ø–∏—Å–∞–ª, —á—Ç–æ –∞–∫—Ü–∏–∏ –∞–≤–∏–∞–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ - –æ–¥–Ω–∏ –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –æ—Ç—Å–∫–æ–∫. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ–≥–¥–∞ –≤—Å—ë –≤—ã–≥–ª—è–¥–µ–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–æ–Ω–≥–æ–≤–æ üëá  1Ô∏è‚É£ –û—Ç—Å–∫–æ–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –æ—Ç —Å–∏–ª—å–Ω–µ–π—à–µ–≥–æ —É—Ä–æ–≤–Ω—è 46 –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–¥–æ–≤–æ–π, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏  2Ô∏è‚É£ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–æ–¥–∂–∏ –Ω–∞ –≤–∞–∂–Ω–µ–π—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –∏–∑ 1 –ø—É–Ω–∫—Ç–∞.   –î–∞ –∏ –≤ —Ü–µ–ª–æ–º —Ü–µ–Ω–∞ –ø—Ä–∏—à–ª–∞ –Ω–∞ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –≤ —Å–µ–Ω—Ç—è–±—Ä–µ –ø–æ–∫–∞–∑–∞–ª–∞ 30% —Ä–æ—Å—Ç. –¢–∞–∫ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–ª—å–Ω–µ–π—à–µ–µ –∫–æ–º–±–æ - —Å–æ —Å–≤–æ–∏—Ö –º–∏–Ω–∏–º—É–º–æ–≤ –∞–∫—Ü–∏–∏ –≤—ã—Ä–æ—Å–ª–∏ —Ç–∞–∫–∂–µ –Ω–∞ 30%.  –°–∫–µ–ø—Ç–∏–∫–∏ —á–∞—Å—Ç–æ –ª—é–±—è—Ç –≥–æ–≤–æ—Ä–∏—Ç—å - —Å–∞–º–æ–ª–µ—Ç–æ–≤ –Ω–µ—Ç —É –Ω–∞—Å, –≤—Å—ë –ª–æ–º–∞–µ—Ç—Å—è, –¥–æ–ª–≥ –±–æ–ª—å—à–æ–π. –û—Ç–∫—É–¥–∞ –∂ –≤–∑—è—Ç—å—Å—è —Ä–æ—Å—Ç—É?  –ö–∞–∫ –≤–∏–¥–∏—Ç–µ, —Ç–∞–∫–∞—è –±–∞–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –≠—Ç–æ –∏–∑ —Ä–∞–∑—Ä—è–¥–∞ –º—ã—Å–ª–µ–π –Ω–æ–≤–∏—á–∫–æ–≤, —á—Ç–æ –ë–µ–ª—É–≥–∞ –∏ –ê–±—Ä–∞—É –î—é—Ä—Å–æ –Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ —Å–∏–ª—å–Ω–æ –≤—ã—Ä–∞—Å—Ç—É—Ç –ø–µ—Ä–µ–¥ –ù–ì (–≤—Å–µ –∂ –∞–ª–∫–∞—à–∫—É –ø–æ–∫—É–ø–∞—é—Ç), –∞ –∞–∫—Ü–∏–∏ Whoosh –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç –ø–∞–¥–∞—Ç—å —Å –Ω–æ—è–±—Ä—å—Å–∫–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.  –†–µ–∞–ª—å–Ω–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω–∞—á–µ - —É –ê—ç—Ä–æ—Ñ–ª–æ—Ç–∞ —Ä–∞—Å—Ç—ë—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫ –∏ —Ü–µ–Ω—ã –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã, –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —ç—Ç–æ –∫—É–¥–∞ –≤–∞–∂–Ω–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º. –ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –≤ 3 –∫–≤–∞—Ä—Ç–∞–ª–µ —Å–∏–ª—å–Ω–æ –≤—ã—Ä–æ—Å–ª–∞ –≤—ã—Ä—É—á–∫–∞ (+37%), —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 17.6 –º–ª—Ä–¥ –ø—Ä–æ—Ç–∏–≤ 9.3 –º–ª—Ä–¥ —É–±—ã—Ç–∫–∞ –≥–æ–¥–æ–º —Ä–∞–Ω–µ–µ –∏ —Å–æ–∫—Ä–∞—Ç–∏–ª—Å—è —á–∏—Å—Ç—ã–π –¥–æ–ª–≥ –Ω–∞ 9.7%.  –ß—Ç–æ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ? –í —Ä–∞–π–æ–Ω–µ 64 –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤ –∏—é–Ω–µ –∏ –Ω–æ—è–±—Ä–µ. –î–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ 7-8%, –ø–æ—ç—Ç–æ–º—É –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–æ—Å—Ç–∞ –µ—â—ë –µ—Å—Ç—å.  –ù–æ –ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–∂–∞—Ç—å –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –º–∞–∫—Å–∏–º—É–º—É –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è, –ø–æ—ç—Ç–æ–º—É –Ω–∞—á–∏–Ω–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–¥–æ —É–∂–µ —Å–µ–π—á–∞—Å, –±–ª–∞–≥–æ –ø—Ä–∏–±—ã–ª—å –≤–µ—Å—å–º–∞ –∂–∏—Ä–Ω–∞—è (–æ—Ç 20% –¥–æ 25% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞).  –ê –≤–æ—Ç –ø—Ä–∏ —à—Ç—É—Ä–º–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è 64 –∏ –ø–æ–ø—ã—Ç–∫–∞—Ö –æ—Ç–∫–∞—Ç–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –∫ —à–æ—Ä—Ç—É. –ù–æ –ø–æ–∫–∞ –æ–± —ç—Ç–æ–º —Ä–∞–Ω–æ, –µ—Å–ª–∏ –±—É–¥—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏, –Ω–∞–ø–∏—à—É –≤ –∫–∞–Ω–∞–ª–µ üòé"
	testChannel := "TestChannel"

	logger.Printf("Analyzing message: %s", testMessage)
	analysis, err := aiClient.AnalyzeMessage(context.Background(), testMessage, testChannel)
	if err != nil {
		logger.Fatalf("Failed to analyze message: %v", err)
	}

	logger.Print("\n--- AI Analysis (Ollama): ---")
	if len(analysis.Predictions) > 0 {
		for i, prediction := range analysis.Predictions {
			logger.Printf("\n--- Prediction %d ---", i+1)
			logger.Printf("  Message ID: %s", prediction.MessageID)
			logger.Printf("  Prediction Type: %s", prediction.PredictionType)
			logger.Printf("  Ticker: %s", prediction.Ticker)
			logger.Printf("  Target Price: %s", prediction.TargetPrice)
			logger.Printf("  Target Change Percent: %s", prediction.TargetChangePercent)
			logger.Printf("  Period: %s", prediction.Period)
			logger.Printf("  Recommendation: %s", prediction.Recommendation)
			logger.Printf("  Direction: %s", prediction.Direction)
			logger.Printf("  Justification Text: %s", prediction.JustificationText)
		}
	} else {
		logger.Print("  No financial predictions available.")
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	logger.Print("\n=== Test completed successfully! ===")
	logger.Print("Press Ctrl+C to exit...")
	<-sigChan
	logger.Print("Shutting down...")
}
